generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Superuser {
  id           String        @id @default(uuid())
  username     String        @unique
  passwordHash String        @map("password_hash")
  email        String?       @unique
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  smmmAccounts SMMMAccount[]

  @@map("superusers")
}

model SMMMAccount {
  id               String              @id @default(uuid())
  superuserId      String              @map("superuser_id")
  companyName      String              @map("company_name")
  username         String              @unique
  passwordHash     String              @map("password_hash")
  email            String?             @unique
  phone            String?
  address          String?
  subscriptionPlan String?             @map("subscription_plan")
  isActive         Boolean             @default(true) @map("is_active")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  charges          ChargeItem[]
  credentials      EDevletCredential[]
  payments         Payment[]
  notes            TaxpayerNote[]
  earsivCredentials EArsivCredential[]
  earsivInvoices    EArsivInvoice[]
  superuser        Superuser           @relation(fields: [superuserId], references: [id], onDelete: Cascade)
  taxpayers        Taxpayer[]

  @@map("smmm_accounts")
}

model Taxpayer {
  id          String              @id @default(uuid())
  smmmId      String              @map("smmm_id")
  tcNumber    String?             @unique @map("tc_number")
  taxNumber   String?             @map("tax_number")
  firstName   String              @map("first_name")
  lastName    String              @map("last_name")
  email       String?
  phone       String?
  address     String?
  monthlyFee  Decimal             @default(0) @map("monthly_fee") @db.Decimal(10, 2)
  isActive    Boolean             @default(true) @map("is_active")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  companyName String?             @map("company_name")
  charges     ChargeItem[]
  documents   Document[]
  credentials EDevletCredential[]
  payments    Payment[]
  notes       TaxpayerNote[]
  earsivCredential EArsivCredential?
  earsivInvoices   EArsivInvoice[]
  smmm        SMMMAccount         @relation(fields: [smmmId], references: [id], onDelete: Cascade)

  @@map("taxpayers")
}

model Payment {
  id            String        @id @default(uuid())
  taxpayerId    String        @map("taxpayer_id")
  smmmId        String        @map("smmm_id")
  year          Int
  month         Int
  amount        Decimal       @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  paymentDate   DateTime?     @map("payment_date")
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  smmm          SMMMAccount   @relation(fields: [smmmId], references: [id], onDelete: Cascade)
  taxpayer      Taxpayer      @relation(fields: [taxpayerId], references: [id], onDelete: Cascade)

  @@unique([taxpayerId, year, month])
  @@map("payments")
}

model EDevletCredential {
  id                String      @id @default(uuid())
  taxpayerId        String      @map("taxpayer_id")
  smmmId            String      @map("smmm_id")
  platform          Platform
  username          String?
  passwordEncrypted String      @map("password_encrypted")
  isActive          Boolean     @default(true) @map("is_active")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  smmm              SMMMAccount @relation(fields: [smmmId], references: [id], onDelete: Cascade)
  taxpayer          Taxpayer    @relation(fields: [taxpayerId], references: [id], onDelete: Cascade)

  @@unique([taxpayerId, platform])
  @@map("edevlet_credentials")
}

model Document {
  id           String       @id @default(uuid())
  taxpayerId   String       @map("taxpayer_id")
  title        String
  description  String?
  filePath     String       @map("file_path")
  fileType     String       @map("file_type")
  fileSize     Int          @map("file_size")
  documentType DocumentType @map("document_type")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  taxpayer     Taxpayer     @relation(fields: [taxpayerId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model WhatsAppMessage {
  id          String        @id @default(uuid())
  taxpayerId  String        @map("taxpayer_id")
  smmmId      String        @map("smmm_id")
  messageType MessageType   @map("message_type")
  content     String
  filePath    String?       @map("file_path")
  status      MessageStatus @default(PENDING)
  sentAt      DateTime?     @map("sent_at")
  createdAt   DateTime      @default(now()) @map("created_at")

  @@map("whatsapp_messages")
}

model ChargeItem {
  id         String       @id @default(uuid())
  taxpayerId String       @map("taxpayer_id")
  smmmId     String       @map("smmm_id")
  title      String
  type       String?
  amount     Decimal      @db.Decimal(10, 2)
  status     ChargeStatus @default(PENDING)
  dueDate    DateTime?    @map("due_date")
  notes      String?
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  smmm       SMMMAccount  @relation(fields: [smmmId], references: [id], onDelete: Cascade)
  taxpayer   Taxpayer     @relation(fields: [taxpayerId], references: [id], onDelete: Cascade)

  @@map("charge_items")
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum Platform {
  EARSIV_PORTAL
  DIJITAL_GIB
  ISTANBUL_GIB
}

enum DocumentType {
  BEYANNAME
  FATURA
  SOZLESME
  DIGER
}

enum MessageType {
  PAYMENT_REMINDER
  BEYANNAME_NOTIFICATION
  GENERAL_MESSAGE
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum ChargeStatus {
  PENDING
  PAID
  CANCELLED
}

model TaxpayerNote {
  id         String       @id @default(uuid())
  taxpayerId String       @map("taxpayer_id")
  smmmId     String       @map("smmm_id")
  text       String
  isDone     Boolean      @default(false) @map("is_done")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  taxpayer   Taxpayer     @relation(fields: [taxpayerId], references: [id], onDelete: Cascade)
  smmm       SMMMAccount  @relation(fields: [smmmId], references: [id], onDelete: Cascade)

  @@map("taxpayer_notes")
}

model EArsivCredential {
  id              String      @id @default(uuid())
  taxpayerId      String      @map("taxpayer_id")
  smmmId          String      @map("smmm_id")
  userCode        String      @map("user_code")
  passwordEnc     String      @map("password_enc")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  taxpayer        Taxpayer    @relation(fields: [taxpayerId], references: [id], onDelete: Cascade)
  smmm            SMMMAccount @relation(fields: [smmmId], references: [id], onDelete: Cascade)

  @@unique([taxpayerId])
  @@map("earsiv_credentials")
}

model EArsivInvoice {
  id              String      @id @default(uuid())
  taxpayerId      String      @map("taxpayer_id")
  smmmId          String      @map("smmm_id")
  uuid            String?
  status          String      @default("PENDING")
  scenario        String?
  pdfUrl          String?     @map("pdf_url")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  taxpayer        Taxpayer    @relation(fields: [taxpayerId], references: [id], onDelete: Cascade)
  smmm            SMMMAccount @relation(fields: [smmmId], references: [id], onDelete: Cascade)

  @@index([taxpayerId])
  @@index([smmmId])
  @@map("earsiv_invoices")
}
